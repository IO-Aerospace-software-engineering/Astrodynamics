/*
 Copyright (c) 2021-2023. Sylvain Guillet (sylvain.guillet@tutamail.com)
 */
#ifndef PROPAGATOR_BASE_H
#define PROPAGATOR_BASE_H

#include <IntegratorBase.h>
#include <Spacecraft.h>

namespace IO::SDK::Maneuvers
{
    class ManeuverBase;
}

namespace IO::SDK::Propagators
{
    class Propagator
    {
    private:
        IO::SDK::Maneuvers::ManeuverBase *m_standbyManeuver{nullptr};
        const IO::SDK::Body::Spacecraft::Spacecraft &m_spacecraft;
        IO::SDK::Integrators::IntegratorBase &m_integrator;
        IO::SDK::Time::Window<IO::SDK::Time::TDB> m_window;
        std::vector<IO::SDK::OrbitalParameters::StateVector> m_stateVectors{};
        std::vector<std::vector<IO::SDK::OrbitalParameters::StateOrientation>> m_StateOrientations{};

    public:
        /**
         * @brief Construct a new Propagator Base object
         * 
         * @param spacecraft Spacecraft to propagate
         * @param integrator Integrator to use
         * @param window Time window propagation
         */
        Propagator(const IO::SDK::Body::Spacecraft::Spacecraft &spacecraft, const IO::SDK::Integrators::IntegratorBase &integrator, const IO::SDK::Time::Window<IO::SDK::Time::TDB> &window);

        /**
         * @brief Set the Standby Maneuver
         * 
         * @param standbyManeuver 
         */
        void SetStandbyManeuver(IO::SDK::Maneuvers::ManeuverBase *standbyManeuver);

        /**
         * @brief Propagate
         * 
         */
        void Propagate();

        /**
         * @brief Find the nearest lower state vector from an epoch
         * 
         * @param epoch 
         * @return const IO::SDK::OrbitalParameters::StateVector* 
         */
        [[nodiscard]] const IO::SDK::OrbitalParameters::StateVector *FindNearestLowerStateVector(const IO::SDK::Time::TDB &epoch) const;

        /**
         * @brief Add a state vector
         * 
         * @param sv State vector
         */
        void AddStateVector(const IO::SDK::OrbitalParameters::StateVector &sv);

        /**
         * @brief Add a state orientation
         * 
         * @param so State orientation
         */
        void AddStateOrientation(const IO::SDK::OrbitalParameters::StateOrientation &so);

        /**
         * @brief Erase data from a given epoch up to end
         * 
         * @param epoch 
         */
        void EraseDataFromEpochToEnd(const IO::SDK::Time::DateTime &epoch);

        /**
         * @brief Get the State Vectors generated by propagator
         * 
         * @return const std::vector<std::unique_ptr<IO::SDK::OrbitalParameters::StateVector>>& 
         */
        [[nodiscard]] const std::vector<IO::SDK::OrbitalParameters::StateVector> &GetStateVectors() const;

        /**
         * Clear StateOrientations collection handled by this propagator
         */
        void ClearStateOrientations();

        /**
         * Get State orientations generated by propagator
         * @return
         */
        [[nodiscard]] const std::vector<std::vector<IO::SDK::OrbitalParameters::StateOrientation>>& GetStateOrientations() const;

        /**
         * @brief Get the Latest State Orientation
         * 
         * @return IO::SDK::OrbitalParameters::StateOrientation* 
         */
        [[nodiscard]] const IO::SDK::OrbitalParameters::StateOrientation* GetLatestStateOrientation() const;
    };

} // namespace IO::SDK::Propagators

#endif